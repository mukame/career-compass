=== IMPORTANT CODE FILES ===


=== src/app/layout.tsx ===
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Career Compass - キャリアアップ支援ツール',
  description: 'あなたのキャリアアップに伴走する自己理解・自己変革支援ツール',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ja">
      <body className={inter.className} suppressHydrationWarning={true}>
        {children}
      </body>
    </html>
  )
}


=== src/app/page.tsx ===
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase'
import { AnimatedSection } from '@/components/ui/AnimatedSection'
import { FloatingElements } from '@/components/ui/FloatingElements'
import { Card, CardContent } from '@/components/ui/Card'

export default function HomePage() {
  const [loading, setLoading] = useState(true)
  const [mounted, setMounted] = useState(false)
  const router = useRouter()

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted) return

    const checkAuth = async () => {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (user) {
        router.push('/dashboard')
        return
      }
      
      setLoading(false)
    }

    checkAuth()
  }, [router, mounted])

  if (!mounted || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <div className="text-center">
          <div className="relative">
            <div className="animate-spin rounded-full h-20 w-20 border-4 border-blue-200 mx-auto"></div>
            <div className="animate-spin rounded-full h-20 w-20 border-4 border-blue-600 border-t-transparent mx-auto absolute top-0"></div>
          </div>
          <p className="mt-6 text-gray-600 font-medium">読み込み中...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 relative overflow-hidden">
      <FloatingElements />
      
      {/* ヘッダー */}
      <header className="relative bg-white/80 backdrop-blur-lg shadow-sm border-b border-gray-200/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Career Compass
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.push('/auth/login')}
                className="px-4 py-2 text-gray-700 hover:text-blue-600 font-medium transition-colors"
              >
                ログイン
              </button>
              <button
                onClick={() => router.push('/auth/signup')}
                className="px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-medium hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                無料で始める
              </button>
            </div>
          </div>
        </div>
      </header>
      
      {/* ヒーローセクション */}
      <section className="relative pt-20 pb-32">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <AnimatedSection animation="fadeInUp">
              <div className="mb-8">
                <div className="inline-flex items-center px-4 py-2 bg-blue-100 text-blue-800 rounded-full text-sm font-medium mb-8">
                  <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  AI Powered キャリア支援ツール
                </div>
                <h1 className="text-6xl md:text-7xl font-bold text-gray-900 mb-6 leading-tight">
                  あなたのキャリアに
                  <br />
                  <span className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
                    新しい方向性
                  </span>を
                </h1>
                <p className="text-xl md:text-2xl text-gray-600 mb-12 leading-relaxed max-w-4xl mx-auto">
                  Career Compassは、あなたの価値観や志向性に基づいて、<br />
                  <span className="font-semibold text-gray-800">イキイキとしたキャリアアップ</span>をサポートする伴走型ツールです。
                </p>
              </div>
            </AnimatedSection>
            
            <AnimatedSection animation="scaleIn" delay={300}>
              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-16">
                <button
                  onClick={() => router.push('/auth/signup')}
                  className="group px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-2xl font-semibold text-lg hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-200 shadow-2xl hover:shadow-3xl transform hover:scale-105"
                >
                  <span className="flex items-center">
                    無料で始める
                    <svg className="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                    </svg>
                  </span>
                </button>
                <button
                  onClick={() => router.push('/auth/login')}
                  className="px-8 py-4 border-2 border-gray-300 text-gray-700 rounded-2xl font-semibold text-lg hover:border-gray-400 hover:bg-gray-50 focus:outline-none focus:ring-4 focus:ring-gray-200 transition-all duration-200"
                >
                  ログイン
                </button>
              </div>
            </AnimatedSection>

            {/* 信頼性指標 */}
            <AnimatedSection animation="fadeInUp" delay={600}>
              <div className="flex flex-wrap justify-center items-center gap-8 text-gray-500 mb-20">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="font-medium">AI分析精度 95%+</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }}></div>
                  <span className="font-medium">ユーザー満足度 98%</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse" style={{ animationDelay: '1s' }}></div>
                  <span className="font-medium">キャリアアップ成功率 87%</span>
                </div>
              </div>
            </AnimatedSection>
          </div>
        </div>
      </section>

      {/* 機能紹介セクション */}
      <section className="py-24 bg-white/50 backdrop-blur-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <AnimatedSection animation="fadeInUp">
            <div className="text-center mb-20">
              <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
                なぜCareer Compassが
                <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">選ばれるのか</span>
              </h2>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                最先端のAI技術と心理学的アプローチを組み合わせ、あなただけのキャリア戦略を提案します
              </p>
            </div>
          </AnimatedSection>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <AnimatedSection animation="fadeInLeft" delay={200}>
              <Card className="group hover:shadow-2xl transition-all duration-300 border-0 bg-gradient-to-br from-blue-50 to-blue-100 hover:scale-105">
                <CardContent className="p-8 text-center">
                  <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-200">
                    <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-4">深い自己理解</h3>
                  <p className="text-gray-600 mb-6 leading-relaxed">
                    AIが質問を投げかけ、あなたの価値観や強み、本当にやりたいことを明確化します。
                    科学的アプローチで潜在的な可能性を発見。
                  </p>
                  <div className="flex items-center justify-center space-x-2 text-blue-600 font-semibold">
                    <span>詳しく見る</span>
                    <svg className="w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </div>
                </CardContent>
              </Card>
            </AnimatedSection>
            
            <AnimatedSection animation="scaleIn" delay={400}>
              <Card className="group hover:shadow-2xl transition-all duration-300 border-0 bg-gradient-to-br from-green-50 to-green-100 hover:scale-105">
                <CardContent className="p-8 text-center">
                  <div className="w-20 h-20 bg-gradient-to-br from-green-500 to-green-600 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-200">
                    <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-4">最適な計画作成</h3>
                  <p className="text-gray-600 mb-6 leading-relaxed">
                    目標に向けて具体的で実現可能な行動計画を立案。
                    スキル習得から人脈構築まで、段階的なロードマップを提供。
                  </p>
                  <div className="flex items-center justify-center space-x-2 text-green-600 font-semibold">
                    <span>詳しく見る</span>
                    <svg className="w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </div>
                </CardContent>
              </Card>
            </AnimatedSection>
            
            <AnimatedSection animation="fadeInRight" delay={600}>
              <Card className="group hover:shadow-2xl transition-all duration-300 border-0 bg-gradient-to-br from-purple-50 to-purple-100 hover:scale-105">
                <CardContent className="p-8 text-center">
                  <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-purple-600 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-200">
                    <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-4">継続的な成長支援</h3>
                  <p className="text-gray-600 mb-6 leading-relaxed">
                    進捗を可視化し、モチベーションを維持。
                    定期的な振り返りとAIフィードバックで確実な成長を実現。
                  </p>
                  <div className="flex items-center justify-center space-x-2 text-purple-600 font-semibold">
                    <span>詳しく見る</span>
                    <svg className="w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </div>
                </CardContent>
              </Card>
            </AnimatedSection>
          </div>
        </div>
      </section>

      {/* 統計セクション */}
      <section className="py-24 bg-gradient-to-r from-blue-600 to-purple-600 text-white relative overflow-hidden">
        <div className="absolute inset-0 bg-black/20"></div>
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <AnimatedSection animation="fadeInUp">
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-bold mb-6">
                数字で見るCareer Compass
              </h2>
              <p className="text-xl text-blue-100">
                多くの方に選ばれ、成果を出し続けています
              </p>
            </div>
          </AnimatedSection>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            {[
              { number: '10,000+', label: 'アクティブユーザー', delay: 0 },
              { number: '95%', label: 'ユーザー満足度', delay: 200 },
              { number: '87%', label: 'キャリアアップ成功率', delay: 400 },
              { number: '50,000+', label: 'AI分析実行数', delay: 600 }
            ].map((stat, index) => (
              <AnimatedSection key={index} animation="scaleIn" delay={stat.delay}>
                <div className="text-center">
                  <div className="text-4xl md:text-5xl font-bold mb-2">{stat.number}</div>
                  <div className="text-blue-100 font-medium">{stat.label}</div>
                </div>
              </AnimatedSection>
            ))}
          </div>
        </div>
      </section>

      {/* CTA セクション */}
      <section className="py-24 bg-gray-50">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <AnimatedSection animation="fadeInUp">
            <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              今すぐ始めて、理想のキャリアを
              <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">実現しませんか？</span>
            </h2>
            <p className="text-xl text-gray-600 mb-12">
              たった5分の登録で、あなたのキャリアが変わり始めます
            </p>
            <button
              onClick={() => router.push('/auth/signup')}
              className="inline-flex items-center px-12 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-2xl font-bold text-xl hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-200 shadow-2xl hover:shadow-3xl transform hover:scale-105"
            >
              無料で始める
              <svg className="ml-3 w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </button>
            <p className="text-sm text-gray-500 mt-4">
              クレジットカード不要 • いつでもキャンセル可能
            </p>
          </AnimatedSection>
        </div>
      </section>

      {/* フッター */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <div className="flex items-center justify-center space-x-4 mb-6">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <h3 className="text-2xl font-bold">Career Compass</h3>
          </div>
          <p className="text-gray-400 mb-6">
            あなたのキャリアアップに伴走する自己理解・自己変革支援ツール
          </p>
          <p className="text-sm text-gray-500">
            © 2024 Career Compass. All rights reserved.
          </p>
        </div>
      </footer>
    </div>
  )
}


=== src/app/dashboard/page.tsx ===
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase'
import { Profile } from '@/types/database'
import { User } from '@supabase/supabase-js'
import { Card, CardContent, CardHeader } from '@/components/ui/Card'
import { Badge } from '@/components/ui/Badge'
import { Progress } from '@/components/ui/Progress'

export default function DashboardPage() {
  const [user, setUser] = useState<User | null>(null)
  const [profile, setProfile] = useState<Profile | null>(null)
  const [loading, setLoading] = useState(true)
  const [mounted, setMounted] = useState(false)
  const router = useRouter()

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted) return

    const supabase = createClient()

    const checkAuth = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser()
        
        if (!user) {
          router.push('/auth/login')
          return
        }

        setUser(user)

        const { data: profileData } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single()

        setProfile(profileData)

        if (profileData && !profileData.onboarding_completed) {
          router.push('/onboarding')
          return
        }

      } catch (error) {
        console.error('Error:', error)
        router.push('/auth/login')
      } finally {
        setLoading(false)
      }
    }

    checkAuth()
  }, [router, mounted])

  const handleSignOut = async () => {
    const supabase = createClient()
    await supabase.auth.signOut()
    router.push('/')
  }

  if (!mounted || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <div className="text-center">
          <div className="relative">
            <div className="animate-spin rounded-full h-20 w-20 border-4 border-blue-200 mx-auto"></div>
            <div className="animate-spin rounded-full h-20 w-20 border-4 border-blue-600 border-t-transparent mx-auto absolute top-0"></div>
          </div>
          <p className="mt-6 text-gray-600 font-medium">読み込み中...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  const currentHour = new Date().getHours()
  const greeting = currentHour < 12 ? 'おはようございます' : currentHour < 18 ? 'こんにちは' : 'こんばんは'

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* ヘッダー */}
      <header className="bg-white/80 backdrop-blur-lg shadow-sm border-b border-gray-200/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Career Compass
              </h1>
            </div>
            <div className="flex items-center space-x-4">
                <div className="hidden md:block text-right">
                    <p className="font-semibold text-gray-900">{profile?.full_name || 'ゲスト'}さん</p>
                    <div className="flex items-center space-x-2 mt-1">
                    <Badge 
                        variant={profile?.subscription_status === 'premium' ? 'success' : 'info'} 
                        size="sm"
                    >
                        {profile?.subscription_status === 'premium' ? '✨ プレミアム' : '🆓 フリー'}
                    </Badge>
                    {profile?.subscription_status === 'free' && (
                        <button
                        onClick={() => router.push('/dashboard?upgrade=true')}
                        className="text-xs text-blue-600 hover:text-blue-800 underline"
                        >
                        アップグレード
                        </button>
                    )}
                    </div>
                </div>
              <div className="w-10 h-10 bg-gradient-to-br from-pink-400 to-red-400 rounded-full flex items-center justify-center text-white font-semibold">
                {(profile?.full_name || 'G')[0].toUpperCase()}
              </div>
              <button
                onClick={handleSignOut}
                className="inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-lg border border-gray-200 text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                ログアウト
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* メインコンテンツ */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* ヒーローセクション */}
        <div className="mb-8">
          <Card variant="gradient" className="p-8">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-3xl font-bold text-gray-900 mb-2">
                  {greeting}、{profile?.full_name || 'ゲスト'}さん 👋
                </h2>
                <p className="text-lg text-gray-600 mb-4">
                  今日もキャリアアップに向けて一歩前進しましょう
                </p>
                <div className="flex items-center space-x-4">
                  <Badge variant="info" size="md">
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                    {profile?.subscription_status === 'premium' ? 'プレミアム' : 'フリー'}プラン
                  </Badge>
                  {profile?.current_job_title && (
                    <Badge variant="default" size="md">
                      {profile.current_job_title}
                    </Badge>
                  )}
                </div>
              </div>
              <div className="hidden lg:block">
                <div className="w-32 h-32 bg-gradient-to-br from-yellow-400 via-red-500 to-pink-500 rounded-full flex items-center justify-center">
                  <svg className="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
            </div>
          </Card>
        </div>

        {/* 統計カード */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card variant="elevated" className="group hover:scale-105 transform transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500 mb-1">完了したタスク</p>
                  <p className="text-3xl font-bold text-gray-900">0</p>
                  <p className="text-sm text-green-600 font-medium">+0% 今月</p>
                </div>
                <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-blue-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
              <Progress value={0} color="green" className="mt-4" />
            </CardContent>
          </Card>

          <Card variant="elevated" className="group hover:scale-105 transform transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500 mb-1">進行中の目標</p>
                  <p className="text-3xl font-bold text-gray-900">0</p>
                  <p className="text-sm text-blue-600 font-medium">設定待ち</p>
                </div>
                <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-purple-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
              </div>
              <Progress value={0} color="blue" className="mt-4" />
            </CardContent>
          </Card>

          <Card variant="elevated" className="group hover:scale-105 transform transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500 mb-1">AI分析実行回数</p>
                  <p className="text-3xl font-bold text-gray-900">0</p>
                  <p className="text-sm text-purple-600 font-medium">今月開始</p>
                </div>
                <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-pink-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                  </svg>
                </div>
              </div>
              <Progress value={0} color="purple" className="mt-4" />
            </CardContent>
          </Card>

          <Card variant="elevated" className="group hover:scale-105 transform transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500 mb-1">継続日数</p>
                  <p className="text-3xl font-bold text-gray-900">1</p>
                  <p className="text-sm text-orange-600 font-medium">スタート!</p>
                </div>
                <div className="w-12 h-12 bg-gradient-to-br from-orange-400 to-red-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                </div>
              </div>
              <Progress value={10} color="orange" className="mt-4" />
            </CardContent>
          </Card>
        </div>

        {/* メインアクション */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
          {/* 左カラム - クイックアクション */}
          <div className="lg:col-span-2 space-y-6">
            <h3 className="text-2xl font-bold text-gray-900 mb-6">今日のアクション</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card variant="elevated" className="group hover:shadow-2xl transition-all duration-300 border-l-4 border-l-blue-500">
                    <CardContent className="p-6">
                    <div className="text-center">
                        <div className="w-16 h-16 bg-gradient-to-br from-blue-400 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                        <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                        </svg>
                        </div>
                        <h3 className="text-lg font-bold text-gray-900 mb-2">モヤモヤ分析</h3>
                        <p className="text-gray-600 mb-4 text-sm">現在の悩みや課題をAIと一緒に整理</p>
                        <Badge variant="info" size="sm" className="mb-4">AI分析</Badge>
                        <button
                        onClick={() => router.push('/analysis?type=confusion')}
                        className="w-full inline-flex items-center justify-center px-4 py-3 text-base font-medium rounded-xl bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 shadow-lg hover:shadow-xl"
                        >
                        分析開始 🤔
                        </button>
                    </div>
                    </CardContent>
                </Card>

                <Card variant="elevated" className="group hover:shadow-2xl transition-all duration-300 border-l-4 border-l-green-500">
                    <CardContent className="p-6">
                    <div className="text-center">
                        <div className="w-16 h-16 bg-gradient-to-br from-green-400 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                        <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        </div>
                        <h3 className="text-lg font-bold text-gray-900 mb-2">強み分析</h3>
                        <p className="text-gray-600 mb-4 text-sm">あなたの強みを発見・活用方法を提案</p>
                        <Badge variant="success" size="sm" className="mb-4">AI分析</Badge>
                        <button
                        onClick={() => router.push('/analysis?type=strength')}
                        className="w-full inline-flex items-center justify-center px-4 py-3 text-base font-medium rounded-xl bg-gradient-to-r from-green-600 to-green-700 text-white hover:from-green-700 hover:to-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200 shadow-lg hover:shadow-xl"
                        >
                        分析開始 💪
                        </button>
                    </div>
                    </CardContent>
                </Card>

                <Card variant="elevated" className="group hover:shadow-2xl transition-all duration-300 border-l-4 border-l-purple-500">
                    <CardContent className="p-6">
                    <div className="text-center">
                        <div className="w-16 h-16 bg-gradient-to-br from-purple-400 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                        <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                        </svg>
                        </div>
                        <h3 className="text-lg font-bold text-gray-900 mb-2">キャリアパス分析</h3>
                        <p className="text-gray-600 mb-4 text-sm">最適なキャリアルートをAIが提案</p>
                        <Badge variant="info" size="sm" className="mb-4">AI分析</Badge>
                        <button
                        onClick={() => router.push('/analysis?type=career_path')}
                        className="w-full inline-flex items-center justify-center px-4 py-3 text-base font-medium rounded-xl bg-gradient-to-r from-purple-600 to-purple-700 text-white hover:from-purple-700 hover:to-purple-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-all duration-200 shadow-lg hover:shadow-xl"
                        >
                        分析開始 🗺️
                        </button>
                    </div>
                    </CardContent>
                </Card>

                <Card variant="elevated" className="group hover:shadow-2xl transition-all duration-300 border-l-4 border-l-pink-500">
                    <CardContent className="p-6">
                    <div className="text-center">
                        <div className="w-16 h-16 bg-gradient-to-br from-pink-400 to-pink-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                        <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                        </svg>
                        </div>
                        <h3 className="text-lg font-bold text-gray-900 mb-2">価値観分析</h3>
                        <p className="text-gray-600 mb-4 text-sm">価値観を深掘り・キャリア選択への影響</p>
                        <Badge variant="warning" size="sm" className="mb-4">AI分析</Badge>
                        <button
                        onClick={() => router.push('/analysis?type=values')}
                        className="w-full inline-flex items-center justify-center px-4 py-3 text-base font-medium rounded-xl bg-gradient-to-r from-pink-600 to-pink-700 text-white hover:from-pink-700 hover:to-pink-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500 transition-all duration-200 shadow-lg hover:shadow-xl"
                        >
                        分析開始 💖
                        </button>
                    </div>
                    </CardContent>
                </Card>
              <Card variant="elevated" className="group hover:shadow-2xl transition-all duration-300 border-l-4 border-l-green-500">
                <CardContent className="p-6">
                  <div className="text-center">
                    <div className="w-16 h-16 bg-gradient-to-br from-green-400 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-200">
                      <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-bold text-gray-900 mb-2">目標設定</h3>
                    <p className="text-gray-600 mb-4">具体的な目標とアクションプランを設定しましょう</p>
                    <Badge variant="success" size="sm" className="mb-4">計画立案</Badge>
                    <button
                      onClick={() => router.push('/goals')}
                      className="w-full inline-flex items-center justify-center px-4 py-3 text-base font-medium rounded-xl bg-gradient-to-r from-green-600 to-green-700 text-white hover:from-green-700 hover:to-green-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-200 shadow-lg hover:shadow-xl"
                    >
                      目標を設定
                      <svg className="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                      </svg>
                    </button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* 右カラム - プロフィールサマリー */}
          <div className="space-y-6">
            <Card variant="elevated" className="border-l-4 border-l-purple-500">
              <CardHeader>
                <h3 className="text-lg font-semibold text-gray-900">プロフィールサマリー</h3>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                  <div>
                    <p className="text-sm text-gray-500">現在の業界</p>
                    <p className="font-medium">{profile?.current_industry || '未設定'}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <div>
                    <p className="text-sm text-gray-500">目標業界</p>
                    <p className="font-medium">{profile?.target_industry || '未設定'}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                  <div>
                    <p className="text-sm text-gray-500">キャリア志向</p>
                    <p className="font-medium">
                      {profile?.career_direction === 'management' ? 'マネジメント志向' : 
                       profile?.career_direction === 'specialist' ? 'スペシャリスト志向' : '未設定'}
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => router.push('/profile')}
                  className="w-full mt-4 inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-lg border-2 border-purple-200 text-purple-700 hover:bg-purple-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-colors"
                >
                  プロフィール編集
                </button>
              </CardContent>
            </Card>

            {/* 価値観レーダーチャート（簡易版） */}
            <Card variant="elevated">
              <CardHeader>
                <h3 className="text-lg font-semibold text-gray-900">あなたの価値観</h3>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {[
                    { label: 'ワークライフバランス', value: profile?.values_work_life_balance || 0, color: 'blue' },
                    { label: 'キャリア成長', value: profile?.values_career_growth || 0, color: 'green' },
                    { label: '報酬・待遇', value: profile?.values_compensation || 0, color: 'purple' },
                    { label: '自律性', value: profile?.values_autonomy || 0, color: 'orange' },
                  ].map((item) => (
                    <div key={item.label}>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-gray-600">{item.label}</span>
                        <span className="font-medium">{item.value}/5</span>
                      </div>
                      <Progress value={(item.value / 5) * 100} color={item.color as any} />
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* 最近のアクティビティ */}
        <Card variant="elevated">
          <CardHeader className="flex justify-between items-center">
            <h3 className="text-xl font-semibold text-gray-900">最近のアクティビティ</h3>
            <Badge variant="default" size="sm">New</Badge>
          </CardHeader>
          <CardContent>
            <div className="text-center py-12">
              <div className="w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <p className="text-gray-500 text-lg">まだアクティビティがありません</p>
              <p className="text-sm mt-2 text-gray-400">AI分析や目標設定を行うと、ここに履歴が表示されます</p>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}


=== src/app/onboarding/page.tsx ===
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase'
import { Profile } from '@/types/database'
import { StepIndicator } from '@/components/ui/StepIndicator'
import { ValueSelector } from '@/components/ui/ValueSelector'
import { AnimatedSection } from '@/components/ui/AnimatedSection'
import { GlassCard } from '@/components/ui/GlassCard'
import { AnimatedInput } from '@/components/ui/AnimatedInput'

interface OnboardingStep {
  id: number
  title: string
  description: string
  component: React.ComponentType<any>
}

// Step 1: Welcome
const WelcomeStep = ({ onNext }: { onNext: () => void }) => (
  <div className="text-center max-w-4xl mx-auto">
    <AnimatedSection animation="scaleIn">
      <div className="mb-8">
        <div className="w-32 h-32 bg-gradient-to-br from-yellow-400 via-pink-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-8 shadow-2xl animate-bounce">
          <svg className="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
        </div>
        <h2 className="text-5xl font-bold text-white mb-6">
          Career Compassへようこそ！🎉
        </h2>
        <p className="text-xl text-blue-100 mb-8 leading-relaxed">
          あなたの価値観や志向性を理解し、理想のキャリアを実現するための<br />
          パーソナライズされた伴走者として、Career Compassがサポートします。
        </p>
      </div>
    </AnimatedSection>
    
    <AnimatedSection animation="fadeInUp" delay={300}>
      <GlassCard className="p-8 mb-8">
        <h3 className="text-2xl font-bold text-white mb-6">このアプリでできること</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-left">
          {[
            { icon: '🧠', title: 'AI powered 自己分析', desc: '深層心理まで読み解く高精度分析' },
            { icon: '🎯', title: '個別化された行動計画', desc: 'あなた専用のロードマップ作成' },
            { icon: '📊', title: '進捗の可視化', desc: '成長を実感できるダッシュボード' },
            { icon: '🔄', title: '継続的な振り返り', desc: 'AIが最適なタイミングでサポート' }
          ].map((feature, index) => (
            <div key={index} className="flex items-start space-x-4 p-4 bg-white/5 rounded-2xl hover:bg-white/10 transition-all duration-300">
              <div className="text-3xl">{feature.icon}</div>
              <div>
                <h4 className="font-semibold text-white mb-1">{feature.title}</h4>
                <p className="text-blue-200 text-sm">{feature.desc}</p>
              </div>
            </div>
          ))}
        </div>
      </GlassCard>
    </AnimatedSection>

    <AnimatedSection animation="scaleIn" delay={600}>
      <button
        onClick={onNext}
        className="group px-12 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-bold text-xl rounded-3xl hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-300/50 transition-all duration-200 shadow-2xl hover:shadow-3xl transform hover:scale-105"
      >
        <span className="flex items-center">
          さあ、始めましょう
          <svg className="ml-3 w-6 h-6 group-hover:translate-x-2 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
          </svg>
        </span>
      </button>
    </AnimatedSection>
  </div>
)

// Step 2: Basic Info
const BasicInfoStep = ({ 
  data, 
  onChange, 
  onNext, 
  onPrev 
}: { 
  data: Partial<Profile>
  onChange: (updates: Partial<Profile>) => void
  onNext: () => void
  onPrev: () => void 
}) => (
  <div className="max-w-3xl mx-auto">
    <AnimatedSection animation="fadeInUp">
      <div className="text-center mb-8">
        <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-blue-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
          <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
        </div>
        <h2 className="text-4xl font-bold text-white mb-4">基本情報を教えてください</h2>
        <p className="text-xl text-blue-100">
          より精度の高い分析のために、あなたの現在の状況を入力してください
        </p>
      </div>
    </AnimatedSection>

    <AnimatedSection animation="fadeInUp" delay={200}>
      <GlassCard className="p-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <AnimatedInput
            label="年齢"
            type="number"
            value={data.age?.toString() || ''}
            onChange={(e) => onChange({ age: parseInt(e.target.value) || null })}
            icon={
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            }
          />

          <div>
            <label className="block text-sm font-semibold text-blue-100 mb-3">現在の業界</label>
            <select
              value={data.current_industry || ''}
              onChange={(e) => onChange({ current_industry: e.target.value })}
              className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white focus:outline-none focus:border-blue-400 focus:bg-white/20 transition-all duration-300"
            >
              <option value="" className="text-gray-900">選択してください</option>
              {['IT・通信', '金融・保険', '製造業', '商社・流通', 'コンサルティング', '医療・介護', '教育', '公務員', 'その他'].map(industry => (
                <option key={industry} value={industry} className="text-gray-900">{industry}</option>
              ))}
            </select>
          </div>

          <AnimatedInput
            label="現在の職種"
            type="text"
            value={data.current_job_title || ''}
            onChange={(e) => onChange({ current_job_title: e.target.value })}
            icon={
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 002 2v8a2 2 0 01-2 2H8a2 2 0 01-2-2v-8a2 2 0 012-2V8" />
              </svg>
            }
          />

          <AnimatedInput
            label="現在の年収（万円）"
            type="number"
            value={data.current_annual_income?.toString() || ''}
            onChange={(e) => onChange({ current_annual_income: parseInt(e.target.value) || null })}
            icon={
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
              </svg>
            }
          />
        </div>
      </GlassCard>
    </AnimatedSection>

    <AnimatedSection animation="fadeInUp" delay={400}>
      <div className="flex justify-between mt-8">
        <button
          onClick={onPrev}
          className="px-8 py-3 bg-white/20 text-white font-semibold rounded-2xl hover:bg-white/30 focus:outline-none focus:ring-4 focus:ring-white/20 transition-all duration-200 backdrop-blur-sm"
        >
          戻る
        </button>
        <button
          onClick={onNext}
          disabled={!data.age || !data.current_industry || !data.current_job_title}
          className="px-8 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-2xl hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-300/50 transition-all duration-200 shadow-xl hover:shadow-2xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
        >
          次へ
        </button>
      </div>
    </AnimatedSection>
  </div>
)

// Step 3: Career Goals
const CareerGoalsStep = ({ 
  data, 
  onChange, 
  onNext, 
  onPrev 
}: { 
  data: Partial<Profile>
  onChange: (updates: Partial<Profile>) => void
  onNext: () => void
  onPrev: () => void 
}) => (
  <div className="max-w-4xl mx-auto">
    <AnimatedSection animation="fadeInUp">
      <div className="text-center mb-8">
        <div className="w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
          <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
        </div>
        <h2 className="text-4xl font-bold text-white mb-4">目指すキャリアについて</h2>
        <p className="text-xl text-blue-100">
          あなたが目指すキャリアの方向性を教えてください
        </p>
      </div>
    </AnimatedSection>

    <div className="space-y-8">
      <AnimatedSection animation="fadeInLeft" delay={200}>
        <GlassCard className="p-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-semibold text-blue-100 mb-3">目標とする業界</label>
              <select
                value={data.target_industry || ''}
                onChange={(e) => onChange({ target_industry: e.target.value })}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white focus:outline-none focus:border-green-400 focus:bg-white/20 transition-all duration-300"
              >
                <option value="" className="text-gray-900">選択してください</option>
                {['IT・通信', '金融・保険', '製造業', '商社・流通', 'コンサルティング', '医療・介護', '教育', '公務員', '現在と同じ', 'その他'].map(industry => (
                  <option key={industry} value={industry} className="text-gray-900">{industry}</option>
                ))}
              </select>
            </div>

            <AnimatedInput
              label="目標とする職種"
              type="text"
              value={data.target_job_title || ''}
              onChange={(e) => onChange({ target_job_title: e.target.value })}
              icon={
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              }
            />
          </div>

          <div className="mt-6">
            <AnimatedInput
              label="目標年収（万円）"
              type="number"
              value={data.target_annual_income?.toString() || ''}
              onChange={(e) => onChange({ target_annual_income: parseInt(e.target.value) || null })}
              icon={
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                </svg>
              }
            />
          </div>
        </GlassCard>
      </AnimatedSection>

      <AnimatedSection animation="fadeInRight" delay={400}>
        <GlassCard className="p-8">
          <h3 className="text-2xl font-bold text-white mb-6 text-center">キャリアの方向性</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div
              onClick={() => onChange({ career_direction: 'management' })}
              className={`p-6 rounded-3xl cursor-pointer transition-all duration-300 group ${
                data.career_direction === 'management'
                  ? 'bg-gradient-to-br from-blue-500/30 to-purple-600/30 border-2 border-blue-400 shadow-2xl scale-105'
                  : 'bg-white/10 border-2 border-white/20 hover:bg-white/20 hover:scale-102'
              }`}
            >
              <div className="text-center">
                <div className={`w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 transition-all duration-300 ${
                  data.career_direction === 'management'
                    ? 'bg-gradient-to-br from-blue-400 to-blue-600 shadow-xl'
                    : 'bg-white/20 group-hover:bg-white/30'
                }`}>
                  <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                </div>
                <h4 className="text-xl font-bold text-white mb-2">マネジメント志向 👑</h4>
                <p className="text-blue-100">チーム運営や組織経営に関わりたい</p>
              </div>
            </div>

            <div
              onClick={() => onChange({ career_direction: 'specialist' })}
              className={`p-6 rounded-3xl cursor-pointer transition-all duration-300 group ${
                data.career_direction === 'specialist'
                  ? 'bg-gradient-to-br from-green-500/30 to-emerald-600/30 border-2 border-green-400 shadow-2xl scale-105'
                  : 'bg-white/10 border-2 border-white/20 hover:bg-white/20 hover:scale-102'
              }`}
            >
              <div className="text-center">
                <div className={`w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 transition-all duration-300 ${
                  data.career_direction === 'specialist'
                    ? 'bg-gradient-to-br from-green-400 to-green-600 shadow-xl'
                    : 'bg-white/20 group-hover:bg-white/30'
                }`}>
                  <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                  </svg>
                </div>
                <h4 className="text-xl font-bold text-white mb-2">スペシャリスト志向 🎯</h4>
                <p className="text-blue-100">専門性を極めて価値を提供したい</p>
              </div>
            </div>
          </div>
        </GlassCard>
      </AnimatedSection>
    </div>

    <AnimatedSection animation="fadeInUp" delay={600}>
      <div className="flex justify-between mt-8">
        <button
          onClick={onPrev}
          className="px-8 py-3 bg-white/20 text-white font-semibold rounded-2xl hover:bg-white/30 focus:outline-none focus:ring-4 focus:ring-white/20 transition-all duration-200 backdrop-blur-sm"
        >
          戻る
        </button>
        <button
          onClick={onNext}
          disabled={!data.target_industry || !data.target_job_title || !data.career_direction}
          className="px-8 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white font-semibold rounded-2xl hover:from-green-600 hover:to-emerald-700 focus:outline-none focus:ring-4 focus:ring-green-300/50 transition-all duration-200 shadow-xl hover:shadow-2xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
        >
          次へ
        </button>
      </div>
    </AnimatedSection>
  </div>
)

// Step 4: Values
const ValuesStep = ({ 
  data, 
  onChange, 
  onNext, 
  onPrev 
}: { 
  data: Partial<Profile>
  onChange: (updates: Partial<Profile>) => void
  onNext: () => void
  onPrev: () => void 
}) => {
  const values = [
    { key: 'values_work_life_balance', label: 'ワークライフバランス', description: '仕事とプライベートの両立' },
    { key: 'values_career_growth', label: 'キャリア成長', description: '昇進や職責の拡大' },
    { key: 'values_compensation', label: '報酬・待遇', description: '給与や福利厚生の充実' },
    { key: 'values_autonomy', label: '自律性', description: '裁量権や自由度の高さ' },
    { key: 'values_impact', label: '社会的影響', description: '社会や他者への貢献' },
  ]

  return (
    <div className="max-w-4xl mx-auto">
      <AnimatedSection animation="fadeInUp">
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-br from-purple-400 to-pink-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
            <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
          </div>
          <h2 className="text-4xl font-bold text-white mb-4">価値観について</h2>
          <p className="text-xl text-blue-100 mb-4">
            キャリアにおいて、あなたが重視する価値観を1〜5で評価してください
          </p>
          <p className="text-blue-200">
            <span className="font-semibold">1: 全く重要でない</span> ↔ <span className="font-semibold">5: 非常に重要</span>
          </p>
        </div>
      </AnimatedSection>

      <div className="space-y-6">
        {values.map((value, index) => (
          <AnimatedSection key={value.key} animation="fadeInUp" delay={index * 100}>
            <ValueSelector
              label={value.label}
              description={value.description}
              value={(data as any)[value.key] || 0}
              onChange={(rating) => onChange({ [value.key]: rating })}
            />
          </AnimatedSection>
        ))}
      </div>

      <AnimatedSection animation="fadeInUp" delay={600}>
        <div className="flex justify-between mt-8">
          <button
            onClick={onPrev}
            className="px-8 py-3 bg-white/20 text-white font-semibold rounded-2xl hover:bg-white/30 focus:outline-none focus:ring-4 focus:ring-white/20 transition-all duration-200 backdrop-blur-sm"
          >
            戻る
          </button>
          <button
            onClick={onNext}
            disabled={values.some(v => !(data as any)[v.key])}
            className="px-12 py-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white font-bold text-lg rounded-2xl hover:from-purple-600 hover:to-pink-700 focus:outline-none focus:ring-4 focus:ring-purple-300/50 transition-all duration-200 shadow-xl hover:shadow-2xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
          >
            <span className="flex items-center">
              完了
              <svg className="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </span>
          </button>
        </div>
      </AnimatedSection>
    </div>
  )
}

export default function OnboardingPage() {
  const [currentStep, setCurrentStep] = useState(0)
  const [profileData, setProfileData] = useState<Partial<Profile>>({})
  const [loading, setLoading] = useState(false)
  const [mounted, setMounted] = useState(false)
  const router = useRouter()

  const steps: OnboardingStep[] = [
    { id: 0, title: 'ようこそ', description: 'Career Compassの紹介', component: WelcomeStep },
    { id: 1, title: '基本情報', description: '現在の状況について', component: BasicInfoStep },
    { id: 2, title: 'キャリア目標', description: '目指す方向性について', component: CareerGoalsStep },
    { id: 3, title: '価値観', description: '重視する価値観について', component: ValuesStep },
  ]

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted) return

    const checkAuth = async () => {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        router.push('/auth/login')
        return
      }

      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single()

      if (profile) {
        setProfileData(profile)
        
        if (profile.onboarding_completed) {
          router.push('/dashboard')
        }
      }
    }

    checkAuth()
  }, [router, mounted])

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    } else {
      handleComplete()
    }
  }

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleDataChange = (updates: Partial<Profile>) => {
    setProfileData(prev => ({ ...prev, ...updates }))
  }

  const handleComplete = async () => {
    setLoading(true)
    
    try {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) throw new Error('User not found')

      const { error } = await supabase
        .from('profiles')
        .update({
          ...profileData,
          onboarding_completed: true,
        })
        .eq('id', user.id)

      if (error) throw error

      // 成功アニメーション後にダッシュボードへ
      setTimeout(() => {
        router.push('/dashboard')
      }, 2000)

    } catch (error) {
      console.error('Error completing onboarding:', error)
      alert('オンボーディングの完了に失敗しました。もう一度お試しください。')
      setLoading(false)
    }
  }

  if (!mounted) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-900 via-purple-900 to-pink-900">
        <div className="text-center">
          <div className="relative">
            <div className="animate-spin rounded-full h-20 w-20 border-4 border-blue-200 mx-auto"></div>
            <div className="animate-spin rounded-full h-20 w-20 border-4 border-blue-600 border-t-transparent mx-auto absolute top-0"></div>
          </div>
          <p className="mt-6 text-white font-medium">読み込み中...</p>
        </div>
      </div>
    )
  }

  const CurrentStepComponent = steps[currentStep].component

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-900 via-purple-900 to-pink-900">
        <div className="text-center">
          <div className="w-32 h-32 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-8 animate-bounce">
            <svg className="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h2 className="text-3xl font-bold text-white mb-4">設定完了！🎉</h2>
          <p className="text-xl text-blue-100 mb-4">あなた専用のダッシュボードを準備しています...</p>
          <div className="w-64 bg-white/20 rounded-full h-2 mx-auto">
            <div className="bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full animate-pulse" style={{ width: '100%' }}></div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-pink-900 relative overflow-hidden">
      {/* 背景エフェクト */}
      <div className="absolute inset-0">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }}></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-pink-500/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '4s' }}></div>
      </div>

      {/* ヘッダー */}
      <header className="relative bg-white/10 backdrop-blur-lg border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-600 rounded-xl flex items-center justify-center">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h1 className="text-2xl font-bold text-white">Career Compass</h1>
            </div>
            <div className="text-blue-100 font-medium">
              ステップ {currentStep + 1} / {steps.length}
            </div>
          </div>
        </div>
      </header>

      {/* プログレスバー */}
      <div className="relative bg-white/5 backdrop-blur-sm border-b border-white/10">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <StepIndicator steps={steps} currentStep={currentStep} />
        </div>
      </div>

      {/* メインコンテンツ */}
      <main className="relative max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <CurrentStepComponent
          data={profileData}
          onChange={handleDataChange}
          onNext={handleNext}
          onPrev={handlePrev}
        />
      </main>
    </div>
  )
}


=== src/components/analysis/AnalysisForm.tsx ===
'use client'

import React, { useState } from 'react'
import { GlassCard } from '@/components/ui/GlassCard'
import { AnimatedInput } from '@/components/ui/AnimatedInput'
import { AnimatedSection } from '@/components/ui/AnimatedSection'

interface AnalysisFormProps {
  analysisType: 'confusion' | 'strength' | 'career_path' | 'values'
  onSubmit: (data: any) => void
  loading: boolean
}

export const AnalysisForm: React.FC<AnalysisFormProps> = ({
  analysisType,
  onSubmit,
  loading
}) => {
  const [formData, setFormData] = useState<any>({})

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSubmit(formData)
  }

  const renderConfusionForm = () => (
    <div className="space-y-6">
      <AnimatedSection animation="fadeInUp">
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
            <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
            </svg>
          </div>
          <h2 className="text-4xl font-bold text-white mb-4">モヤモヤ分析 🤔</h2>
          <p className="text-xl text-blue-100">
            現在の悩みや課題をAIと一緒に整理しましょう
          </p>
        </div>
      </AnimatedSection>

      <AnimatedSection animation="fadeInUp" delay={200}>
        <GlassCard className="p-8">
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                現在の状況について詳しく教えてください 💭
              </label>
              <textarea
                value={formData.currentSituation || ''}
                onChange={(e) => setFormData({...formData, currentSituation: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-blue-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: 今の仕事にやりがいを感じられず、毎日が単調に感じています。将来のキャリアについても明確なビジョンが描けず、このままでいいのか不安です..."
                required
              />
            </div>

            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                特に気になることや悩んでいることは？ 😟
              </label>
              <textarea
                value={formData.specificConcerns || ''}
                onChange={(e) => setFormData({...formData, specificConcerns: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-blue-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: 同僚と比較して成長が遅いと感じる、上司との関係がうまくいかない、新しいスキルを身につける時間がない..."
                required
              />
            </div>

            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                理想的にはどうなりたいですか？ ✨
              </label>
              <textarea
                value={formData.desiredOutcome || ''}
                onChange={(e) => setFormData({...formData, desiredOutcome: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-blue-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: もっとやりがいのある仕事がしたい、チームをリードする立場になりたい、ワークライフバランスを改善したい..."
                required
              />
            </div>
          </div>
        </GlassCard>
      </AnimatedSection>
    </div>
  )

  const renderStrengthForm = () => (
    <div className="space-y-6">
      <AnimatedSection animation="fadeInUp">
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-br from-green-400 to-emerald-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
            <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <h2 className="text-4xl font-bold text-white mb-4">強み分析 💪</h2>
          <p className="text-xl text-blue-100">
            あなたの強みを発見し、キャリアに活かす方法を見つけましょう
          </p>
        </div>
      </AnimatedSection>

      <AnimatedSection animation="fadeInUp" delay={200}>
        <GlassCard className="p-8">
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                これまでの経験や成果について教えてください 🏆
              </label>
              <textarea
                value={formData.experiences || ''}
                onChange={(e) => setFormData({...formData, experiences: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-green-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: プロジェクトリーダーとして売上20%向上を達成、新人研修プログラムを立ち上げ、チーム離職率を30%改善..."
                required
              />
            </div>

            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                得意なことや自信があることは？ ⭐
              </label>
              <textarea
                value={formData.strengths || ''}
                onChange={(e) => setFormData({...formData, strengths: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-green-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: 複雑な問題を整理して解決策を見つけること、チームメンバーのモチベーション向上、データ分析..."
                required
              />
            </div>

            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                周りからよく言われることは？ 👥
              </label>
              <textarea
                value={formData.feedback || ''}
                onChange={(e) => setFormData({...formData, feedback: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-green-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: 話しやすい、アイデアが豊富、責任感が強い、細かいところまで気づく..."
                required
              />
            </div>
          </div>
        </GlassCard>
      </AnimatedSection>
    </div>
  )

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-pink-900 relative overflow-hidden">
      {/* 背景エフェクト */}
      <div className="absolute inset-0">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }}></div>
      </div>

      <div className="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <form onSubmit={handleSubmit}>
          {analysisType === 'confusion' && renderConfusionForm()}
          {analysisType === 'strength' && renderStrengthForm()}
          
          <AnimatedSection animation="fadeInUp" delay={400}>
            <div className="text-center mt-12">
              <button
                type="submit"
                disabled={loading}
                className="group px-12 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-bold text-xl rounded-3xl hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-300/50 transition-all duration-200 shadow-2xl hover:shadow-3xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
              >
                {loading ? (
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <span>AI分析中...</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-3">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                    </svg>
                    <span>AI分析を開始</span>
                    <svg className="w-5 h-5 group-hover:translate-x-2 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                    </svg>
                  </div>
                )}
              </button>
            </div>
          </AnimatedSection>
        </form>
      </div>
    </div>
  )

  const renderCareerPathForm = () => (
    <div className="space-y-6">
      <AnimatedSection animation="fadeInUp">
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-br from-purple-400 to-pink-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
            <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
            </svg>
          </div>
          <h2 className="text-4xl font-bold text-white mb-4">キャリアパス分析 🗺️</h2>
          <p className="text-xl text-blue-100">
            あなたに最適なキャリアパスをAIが提案します
          </p>
        </div>
      </AnimatedSection>

      <AnimatedSection animation="fadeInUp" delay={200}>
        <GlassCard className="p-8">
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                現在のスキルと経験について 🛠️
              </label>
              <textarea
                value={formData.currentSkills || ''}
                onChange={(e) => setFormData({...formData, currentSkills: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-purple-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: JavaScript、React、Node.js、プロジェクト管理、チームリーダー経験3年、新規事業立ち上げ経験..."
                required
              />
            </div>

            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                興味のある分野や挑戦したいこと 🌟
              </label>
              <textarea
                value={formData.interests || ''}
                onChange={(e) => setFormData({...formData, interests: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-purple-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: AI・機械学習、プロダクトマネジメント、スタートアップ、グローバル展開、社会課題解決..."
                required
              />
            </div>

            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                5年後、10年後のキャリアビジョン 🔮
              </label>
              <textarea
                value={formData.futureVision || ''}
                onChange={(e) => setFormData({...formData, futureVision: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-purple-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                placeholder="例: 自分のプロダクトを持つ、チームを率いる、専門性を極める、起業する、社会に大きな影響を与える..."
                required
              />
            </div>

            <div>
              <label className="block text-lg font-semibold text-white mb-4">
                現在の制約や考慮事項 ⚖️
              </label>
              <textarea
                value={formData.constraints || ''}
                onChange={(e) => setFormData({...formData, constraints: e.target.value})}
                className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-purple-400 focus:bg-white/20 transition-all duration-300 min-h-24 resize-none"
                placeholder="例: 転勤は難しい、現在の年収は維持したい、家族の時間を大切にしたい、勉強時間は限られている..."
              />
            </div>
          </div>
        </GlassCard>
      </AnimatedSection>
    </div>
  )

  const renderValuesForm = () => {
    const currentValues = [
      { key: 'work_life_balance', label: 'ワークライフバランス', current: formData.workLifeImportance || 0 },
      { key: 'career_growth', label: 'キャリア成長', current: formData.careerGrowthImportance || 0 },
      { key: 'compensation', label: '報酬・待遇', current: formData.compensationImportance || 0 },
      { key: 'autonomy', label: '自律性・裁量権', current: formData.autonomyImportance || 0 },
      { key: 'impact', label: '社会的影響', current: formData.impactImportance || 0 },
      { key: 'stability', label: '安定性', current: formData.stabilityImportance || 0 }
    ]

    return (
      <div className="space-y-6">
        <AnimatedSection animation="fadeInUp">
          <div className="text-center mb-8">
            <div className="w-20 h-20 bg-gradient-to-br from-pink-400 to-rose-600 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-2xl">
              <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
            </div>
            <h2 className="text-4xl font-bold text-white mb-4">価値観分析 💖</h2>
            <p className="text-xl text-blue-100">
              あなたの価値観を深掘りし、キャリア選択への影響を分析します
            </p>
          </div>
        </AnimatedSection>

        <AnimatedSection animation="fadeInUp" delay={200}>
          <GlassCard className="p-8">
            <div className="mb-8">
              <h3 className="text-xl font-bold text-white mb-4">現在の価値観の重要度（1-5で評価）</h3>
              <p className="text-blue-200 mb-6">まず現在あなたが重視している価値観を評価してください</p>
              
              <div className="space-y-6">
                {currentValues.map((value, index) => (
                  <div key={value.key} className="bg-white/5 rounded-2xl p-6">
                    <div className="flex justify-between items-center mb-4">
                      <div>
                        <h4 className="text-lg font-semibold text-white">{value.label}</h4>
                      </div>
                      <div className="flex space-x-2">
                        {[1, 2, 3, 4, 5].map((rating) => (
                          <button
                            key={rating}
                            onClick={() => setFormData({...formData, [`${value.key}Importance`]: rating})}
                            className={`w-10 h-10 rounded-full font-bold transition-all duration-200 ${
                              value.current === rating
                                ? 'bg-gradient-to-br from-pink-400 to-rose-500 text-white scale-110 shadow-lg'
                                : 'bg-white/20 text-white/70 hover:bg-white/30 hover:scale-105'
                            }`}
                          >
                            {rating}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="space-y-6">
              <div>
                <label className="block text-lg font-semibold text-white mb-4">
                  価値観に関する具体的なエピソード 📖
                </label>
                <textarea
                  value={formData.valueExperiences || ''}
                  onChange={(e) => setFormData({...formData, valueExperiences: e.target.value})}
                  className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-pink-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                  placeholder="例: 残業が多い時期に家族との時間が取れず辛かった、新しいプロジェクトで裁量を持てた時にやりがいを感じた、昇進よりも専門性を高めることに喜びを感じる..."
                  required
                />
              </div>

              <div>
                <label className="block text-lg font-semibold text-white mb-4">
                  価値観の変化や気づき 💡
                </label>
                <textarea
                  value={formData.valueChanges || ''}
                  onChange={(e) => setFormData({...formData, valueChanges: e.target.value})}
                  className="w-full px-4 py-4 bg-white/10 backdrop-blur-sm border-2 border-white/20 rounded-2xl text-white placeholder-blue-200 focus:outline-none focus:border-pink-400 focus:bg-white/20 transition-all duration-300 min-h-32 resize-none"
                  placeholder="例: 最近は仕事の意味を重視するようになった、以前は年収重視だったが今は成長を重視、プライベートの充実がパフォーマンス向上に繋がることを実感..."
                  required
                />
              </div>
            </div>
          </GlassCard>
        </AnimatedSection>
      </div>
    )
  }

  // 既存のreturn文のform部分を更新
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-pink-900 relative overflow-hidden">
      {/* 背景エフェクト */}
      <div className="absolute inset-0">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }}></div>
      </div>

      <div className="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <form onSubmit={handleSubmit}>
          {analysisType === 'confusion' && renderConfusionForm()}
          {analysisType === 'strength' && renderStrengthForm()}
          {analysisType === 'career_path' && renderCareerPathForm()}
          {analysisType === 'values' && renderValuesForm()}
          
          <AnimatedSection animation="fadeInUp" delay={400}>
            <div className="text-center mt-12">
              <button
                type="submit"
                disabled={loading}
                className="group px-12 py-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-bold text-xl rounded-3xl hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-300/50 transition-all duration-200 shadow-2xl hover:shadow-3xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
              >
                {loading ? (
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <span>AI分析中...</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-3">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                    </svg>
                    <span>AI分析を開始</span>
                    <svg className="w-5 h-5 group-hover:translate-x-2 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                    </svg>
                  </div>
                )}
              </button>
            </div>
          </AnimatedSection>
        </form>
      </div>
    </div>
  )
}


=== src/components/analysis/AnalysisResult.tsx ===
'use client'

import React from 'react'
import { GlassCard } from '@/components/ui/GlassCard'
import { AnimatedSection } from '@/components/ui/AnimatedSection'
import { Badge } from '@/components/ui/Badge'
import { Progress } from '@/components/ui/Progress'
import { SaveAnalysisModal } from './SaveAnalysisModal'
import { PlanModal } from '../subscription/PlanModal'

interface AnalysisResultProps {
  result: any
  analysisType: string
  onNewAnalysis: () => void
  onSaveToGoals?: (recommendation: any) => void
}

export const AnalysisResult: React.FC<AnalysisResultProps> = ({
  result,
  analysisType,
  onNewAnalysis,
  onSaveToGoals
}) => {
  const renderConfusionResult = () => (
    <div className="space-y-8">
      {/* サマリー */}
      <AnimatedSection animation="scaleIn">
        <GlassCard className="p-8 text-center border-l-4 border-l-blue-400">
          <h3 className="text-2xl font-bold text-white mb-4">🎯 分析結果サマリー</h3>
          <p className="text-xl text-blue-100 leading-relaxed">{result.summary}</p>
        </GlassCard>
      </AnimatedSection>

      {/* 根本原因分析 */}
      <AnimatedSection animation="fadeInLeft" delay={200}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-red-400 to-pink-500 rounded-full flex items-center justify-center mr-3">
              <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.996-.833-2.598 0L4.732 15.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            根本原因の分析
          </h3>
          <p className="text-blue-100 text-lg mb-6">{result.analysis?.rootCause}</p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold text-white mb-3">🔍 パターン分析</h4>
              <div className="space-y-2">
                {result.analysis?.patterns?.map((pattern: string, index: number) => (
                  <div key={index} className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                    <span className="text-blue-200">{pattern}</span>
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h4 className="font-semibold text-white mb-3">💭 感情分析</h4>
              <div className="space-y-2">
                {result.analysis?.emotions?.map((emotion: string, index: number) => (
                  <Badge key={index} variant="info" size="sm" className="mr-2 mb-2">
                    {emotion}
                  </Badge>
                ))}
              </div>
            </div>
          </div>
        </GlassCard>
      </AnimatedSection>

      {/* 推奨アクション */}
      <AnimatedSection animation="fadeInRight" delay={400}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center mr-3">
              <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            推奨アクション
          </h3>
          
          <div className="space-y-6">
            {result.recommendations?.map((rec: any, index: number) => (
              <div key={index} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <div className="flex justify-between items-start mb-4">
                  <h4 className="text-lg font-semibold text-white">{rec.title}</h4>
                  <div className="flex items-center space-x-2">
                    <Badge 
                      variant={rec.priority === 'high' ? 'error' : rec.priority === 'medium' ? 'warning' : 'info'} 
                      size="sm"
                    >
                      {rec.priority === 'high' ? '高優先度' : rec.priority === 'medium' ? '中優先度' : '低優先度'}
                    </Badge>
                    <span className="text-sm text-blue-200">{rec.timeframe}</span>
                  </div>
                </div>
                <p className="text-blue-100 mb-4">{rec.description}</p>
                
                {onSaveToGoals && (
                  <button
                    onClick={() => onSaveToGoals(rec)}
                    className="px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-600 text-white font-medium rounded-xl hover:from-green-600 hover:to-emerald-700 transition-all duration-200 text-sm"
                  >
                    📋 目標として保存
                  </button>
                )}
              </div>
            ))}
          </div>
        </GlassCard>
      </AnimatedSection>

      {/* 次のステップ */}
      <AnimatedSection animation="fadeInUp" delay={600}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full flex items-center justify-center mr-3">
              <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </div>
            具体的な次のステップ
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {result.nextSteps?.map((step: string, index: number) => (
              <div key={index} className="bg-white/5 rounded-xl p-4 border border-white/10">
                <div className="flex items-center space-x-3">
                  <div className="w-6 h-6 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-bold">
                    {index + 1}
                  </div>
                  <p className="text-blue-100 text-sm">{step}</p>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>
      </AnimatedSection>

      {/* AI洞察 */}
      <AnimatedSection animation="scaleIn" delay={800}>
        <GlassCard className="p-8 bg-gradient-to-br from-purple-500/10 to-pink-500/10 border border-purple-400/30">
          <h3 className="text-xl font-bold text-white mb-4 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full flex items-center justify-center mr-3">
              🧠
            </div>
            AI からの深い洞察
          </h3>
          <p className="text-purple-100 text-lg leading-relaxed">{result.insights}</p>
        </GlassCard>
      </AnimatedSection>
    </div>
  )
    const renderStrengthResult = () => (
    <div className="space-y-8">
      <AnimatedSection animation="scaleIn">
        <GlassCard className="p-8 text-center border-l-4 border-l-green-400">
          <h3 className="text-2xl font-bold text-white mb-4">💪 あなたの強み分析</h3>
          <p className="text-xl text-blue-100 leading-relaxed">{result.summary}</p>
        </GlassCard>
      </AnimatedSection>

      {/* 発見された強み */}
      <AnimatedSection animation="fadeInUp" delay={200}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center mr-3">
              ⭐
            </div>
            発見された強み
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {result.strengths?.map((strength: any, index: number) => (
              <div key={index} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <div className="flex justify-between items-start mb-4">
                  <h4 className="text-lg font-semibold text-white">{strength.name}</h4>
                  <Badge 
                    variant={strength.level === 'high' ? 'success' : strength.level === 'medium' ? 'warning' : 'info'} 
                    size="sm"
                  >
                    {strength.level === 'high' ? '高レベル' : strength.level === 'medium' ? '中レベル' : '発達中'}
                  </Badge>
                </div>
                <p className="text-blue-100 mb-4">{strength.description}</p>
                <div>
                  <h5 className="font-medium text-white mb-2">根拠：</h5>
                  <ul className="space-y-1">
                    {strength.evidence?.map((evidence: string, i: number) => (
                      <li key={i} className="text-blue-200 text-sm flex items-start">
                        <span className="w-1.5 h-1.5 bg-green-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                        {evidence}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>
      </AnimatedSection>

      {/* 強みの活用方法 */}
      <AnimatedSection animation="fadeInLeft" delay={400}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center mr-3">
              🎯
            </div>
            強みの活用方法
          </h3>
          
          <div className="space-y-6">
            {result.applications?.map((app: any, index: number) => (
              <div key={index} className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-2xl p-6 border border-blue-400/20">
                <h4 className="text-lg font-semibold text-white mb-3">{app.area}</h4>
                <div className="mb-4">
                  <h5 className="font-medium text-blue-100 mb-2">具体的な活用方法：</h5>
                  <ul className="space-y-2">
                    {app.specific_ways?.map((way: string, i: number) => (
                      <li key={i} className="text-blue-200 flex items-start">
                        <span className="w-1.5 h-1.5 bg-blue-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                        {way}
                      </li>
                    ))}
                  </ul>
                </div>
                <div className="bg-white/5 rounded-xl p-4">
                  <h5 className="font-medium text-white mb-2">期待される効果：</h5>
                  <p className="text-blue-100">{app.impact}</p>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>
      </AnimatedSection>

      {/* 強化計画 */}
      <AnimatedSection animation="fadeInRight" delay={600}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-orange-400 to-red-500 rounded-full flex items-center justify-center mr-3">
              📈
            </div>
            強み強化計画
          </h3>
          
          <div className="space-y-6">
            {result.development_plan?.map((plan: any, index: number) => (
              <div key={index} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <div className="flex justify-between items-start mb-4">
                  <h4 className="text-lg font-semibold text-white">{plan.strength}</h4>
                  <span className="text-sm text-orange-200 bg-orange-500/20 px-3 py-1 rounded-full">{plan.timeline}</span>
                </div>
                <div>
                  <h5 className="font-medium text-white mb-3">推奨アクション：</h5>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {plan.actions?.map((action: string, i: number) => (
                      <div key={i} className="flex items-center space-x-2 text-blue-200">
                        <div className="w-2 h-2 bg-orange-400 rounded-full"></div>
                        <span>{action}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>
      </AnimatedSection>
    </div>
  )

  const renderCareerPathResult = () => (
    <div className="space-y-8">
      <AnimatedSection animation="scaleIn">
        <GlassCard className="p-8 text-center border-l-4 border-l-purple-400">
          <h3 className="text-2xl font-bold text-white mb-4">🗺️ 推奨キャリアパス</h3>
          <p className="text-xl text-blue-100 leading-relaxed">{result.summary}</p>
        </GlassCard>
      </AnimatedSection>

      {/* 推奨キャリアパス */}
      <AnimatedSection animation="fadeInUp" delay={200}>
        <div className="space-y-6">
          {result.recommended_paths?.map((path: any, index: number) => (
            <GlassCard key={index} className="p-8">
              <div className="flex justify-between items-start mb-6">
                <div>
                  <h3 className="text-2xl font-bold text-white mb-2">{path.title}</h3>
                  <p className="text-blue-100 mb-4">{path.description}</p>
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-blue-200">適合度:</span>
                      <div className="flex items-center space-x-2">
                        <Progress value={path.fit_score} className="w-20" color="purple" />
                        <span className="text-sm font-semibold text-white">{path.fit_score}%</span>
                      </div>
                    </div>
                    <Badge variant="info" size="sm">{path.timeline}</Badge>
                  </div>
                </div>
              </div>

              <div className="mb-6">
                <h4 className="font-semibold text-white mb-3">必要スキル:</h4>
                <div className="flex flex-wrap gap-2">
                  {path.required_skills?.map((skill: string, i: number) => (
                    <Badge key={i} variant="default" size="sm">{skill}</Badge>
                  ))}
                </div>
              </div>

              <div>
                <h4 className="font-semibold text-white mb-4">ステップバイステップ計画:</h4>
                <div className="space-y-4">
                  {path.steps?.map((step: any, i: number) => (
                    <div key={i} className="bg-white/5 rounded-xl p-4 border-l-4 border-l-purple-400">
                      <div className="flex justify-between items-center mb-3">
                        <h5 className="font-semibold text-white">{step.phase}</h5>
                        <span className="text-sm text-purple-200">{step.duration}</span>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h6 className="text-sm font-medium text-blue-100 mb-2">アクション:</h6>
                          <ul className="space-y-1">
                            {step.actions?.map((action: string, j: number) => (
                              <li key={j} className="text-blue-200 text-sm flex items-start">
                                <span className="w-1.5 h-1.5 bg-purple-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                                {action}
                              </li>
                            ))}
                          </ul>
                        </div>
                        <div>
                          <h6 className="text-sm font-medium text-blue-100 mb-2">マイルストーン:</h6>
                          <ul className="space-y-1">
                            {step.milestones?.map((milestone: string, j: number) => (
                              <li key={j} className="text-blue-200 text-sm flex items-start">
                                <span className="w-1.5 h-1.5 bg-green-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                                {milestone}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </GlassCard>
          ))}
        </div>
      </AnimatedSection>

      {/* スキルギャップ分析 */}
      <AnimatedSection animation="fadeInUp" delay={400}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-orange-400 to-red-500 rounded-full flex items-center justify-center mr-3">
              📊
            </div>
            スキルギャップ分析
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {result.skill_gaps?.map((gap: any, index: number) => (
              <div key={index} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <h4 className="text-lg font-semibold text-white mb-4">{gap.skill}</h4>
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-2">
                    <span className="text-blue-200">現在レベル: {gap.current_level}</span>
                    <span className="text-green-200">目標レベル: {gap.target_level}</span>
                  </div>
                  <div className="w-full bg-white/10 rounded-full h-2">
                    <div className="bg-gradient-to-r from-orange-400 to-red-500 h-2 rounded-full" style={{ width: '60%' }}></div>
                  </div>
                </div>
                <div>
                  <h5 className="font-medium text-white mb-2">学習リソース:</h5>
                  <ul className="space-y-1">
                    {gap.learning_resources?.map((resource: string, i: number) => (
                      <li key={i} className="text-blue-200 text-sm flex items-start">
                        <span className="w-1.5 h-1.5 bg-orange-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                        {resource}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>
      </AnimatedSection>
    </div>
  )

  const renderValuesResult = () => (
    <div className="space-y-8">
      <AnimatedSection animation="scaleIn">
        <GlassCard className="p-8 text-center border-l-4 border-l-pink-400">
          <h3 className="text-2xl font-bold text-white mb-4">💖 価値観分析結果</h3>
          <p className="text-xl text-blue-100 leading-relaxed">{result.summary}</p>
        </GlassCard>
      </AnimatedSection>

      {/* 価値観プロファイル */}
      <AnimatedSection animation="fadeInUp" delay={200}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-pink-400 to-rose-500 rounded-full flex items-center justify-center mr-3">
              🎯
            </div>
            あなたの価値観プロファイル
          </h3>
          
          <div className="space-y-6">
            <div className="bg-gradient-to-r from-pink-500/10 to-rose-500/10 rounded-2xl p-6 border border-pink-400/20">
              <h4 className="font-semibold text-white mb-3">主要な価値観</h4>
              <div className="flex flex-wrap gap-2 mb-4">
                {result.value_profile?.dominant_values?.map((value: string, index: number) => (
                  <Badge key={index} variant="info" size="md" className="bg-pink-500/20 text-pink-100">
                    {value}
                  </Badge>
                ))}
              </div>
              <p className="text-pink-100">{result.value_profile?.life_stage_consideration}</p>
            </div>

            {result.value_profile?.value_conflicts?.length > 0 && (
              <div className="bg-orange-500/10 rounded-2xl p-6 border border-orange-400/20">
                <h4 className="font-semibold text-white mb-3">価値観の矛盾</h4>
                <ul className="space-y-2">
                  {result.value_profile.value_conflicts.map((conflict: string, index: number) => (
                    <li key={index} className="text-orange-200 flex items-start">
                      <span className="w-1.5 h-1.5 bg-orange-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                      {conflict}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </GlassCard>
      </AnimatedSection>

      {/* キャリアへの影響 */}
      <AnimatedSection animation="fadeInLeft" delay={400}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center mr-3">
              💼
            </div>
            キャリアへの影響分析
          </h3>
          
          <div className="space-y-6">
            {result.career_implications?.map((implication: any, index: number) => (
              <div key={index} className="bg-white/5 rounded-2xl p-6 border border-white/10">
                <h4 className="text-lg font-semibold text-white mb-3">{implication.value}</h4>
                <p className="text-blue-100 mb-4">{implication.career_impact}</p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h5 className="font-medium text-green-200 mb-2">推奨環境:</h5>
                    <ul className="space-y-1">
                      {implication.recommended_environments?.map((env: string, i: number) => (
                        <li key={i} className="text-green-100 text-sm flex items-start">
                          <span className="w-1.5 h-1.5 bg-green-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                          {env}
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h5 className="font-medium text-red-200 mb-2">潜在的課題:</h5>
                    <ul className="space-y-1">
                      {implication.potential_challenges?.map((challenge: string, i: number) => (
                        <li key={i} className="text-red-100 text-sm flex items-start">
                          <span className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                          {challenge}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>
      </AnimatedSection>

      {/* 適合度評価 */}
      <AnimatedSection animation="fadeInRight" delay={600}>
        <GlassCard className="p-8">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center mr-3">
              📊
            </div>
            キャリア適合度評価
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div className="bg-white/5 rounded-xl p-6">
              <h4 className="font-semibold text-white mb-3">現在の役割</h4>
              <div className="flex items-center space-x-3">
                <Progress value={result.alignment_assessment?.current_role_fit || 0} className="flex-1" color="blue" />
                <span className="text-lg font-bold text-white">{result.alignment_assessment?.current_role_fit || 0}%</span>
              </div>
            </div>
            <div className="bg-white/5 rounded-xl p-6">
              <h4 className="font-semibold text-white mb-3">目標役割</h4>
              <div className="flex items-center space-x-3">
                <Progress value={result.alignment_assessment?.target_role_fit || 0} className="flex-1" color="green" />
                <span className="text-lg font-bold text-white">{result.alignment_assessment?.target_role_fit || 0}%</span>
              </div>
            </div>
          </div>

          <div>
            <h4 className="font-semibold text-white mb-4">推奨事項:</h4>
            <div className="space-y-3">
              {result.alignment_assessment?.recommendations?.map((rec: string, index: number) => (
                <div key={index} className="flex items-start space-x-3 bg-green-500/10 rounded-xl p-4">
                  <div className="w-6 h-6 bg-green-400 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-white text-xs font-bold">{index + 1}</span>
                  </div>
                  <p className="text-green-100">{rec}</p>
                </div>
              ))}
            </div>
          </div>
        </GlassCard>
      </AnimatedSection>
    </div>
  )


  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-pink-900 relative overflow-hidden">
      {/* 背景エフェクト */}
      <div className="absolute inset-0">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }}></div>
      </div>

      <div className="relative max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* ヘッダー */}
        <AnimatedSection animation="fadeInUp">
          <div className="text-center mb-12">
            <div className="w-24 h-24 bg-gradient-to-br from-yellow-400 via-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-6 shadow-2xl animate-bounce">
              <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
            </div>
            <h1 className="text-5xl font-bold text-white mb-4">
              分析完了！ 🎉
            </h1>
            <p className="text-xl text-blue-100">
              AIがあなたの
              {analysisType === 'confusion' ? 'モヤモヤ' : 
               analysisType === 'strength' ? '強み' :
               analysisType === 'career_path' ? 'キャリアパス' : '価値観'}
              を詳しく分析しました
            </p>
          </div>
        </AnimatedSection>

        {/* 結果表示 */}
        {analysisType === 'confusion' && renderConfusionResult()}
        {analysisType === 'strength' && renderStrengthResult()}
        {analysisType === 'career_path' && renderCareerPathResult()}
        {analysisType === 'values' && renderValuesResult()}

        {/* アクションボタン */}
        <AnimatedSection animation="fadeInUp" delay={1000}>
          <div className="text-center mt-12 space-y-4">
            <button
              onClick={onNewAnalysis}
              className="px-8 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold rounded-2xl hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-4 focus:ring-blue-300/50 transition-all duration-200 shadow-xl hover:shadow-2xl transform hover:scale-105 mr-4"
            >
              🔄 新しい分析を開始
            </button>
            <button
              onClick={() => window.history.back()}
              className="px-8 py-3 bg-white/20 text-white font-semibold rounded-2xl hover:bg-white/30 focus:outline-none focus:ring-4 focus:ring-white/20 transition-all duration-200 backdrop-blur-sm"
            >
              📊 ダッシュボードに戻る
            </button>
          </div>
        </AnimatedSection>
      </div>
    </div>
  )
}


=== src/app/api/openai/analyze/route.ts ===
import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { createServerSupabaseClient } from '@/lib/supabase-server'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    const supabase = await createServerSupabaseClient()
    
    // 認証チェック
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { analysisType, inputData, profileData } = await request.json()

    // プロファイル情報を取得
    const { data: profile } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single()

    if (!profile) {
      return NextResponse.json({ error: 'Profile not found' }, { status: 404 })
    }

    let systemPrompt = ''
    let userPrompt = ''

    switch (analysisType) {
      case 'confusion':
        systemPrompt = `あなたはキャリアコンサルタントとして、ユーザーの「モヤモヤ」を分析し、具体的なアドバイスを提供します。

ユーザーのプロフィール：
- 年齢: ${profile.age}歳
- 現在の業界: ${profile.current_industry}
- 現在の職種: ${profile.current_job_title}
- 現在の年収: ${profile.current_annual_income}万円
- 目標業界: ${profile.target_industry}
- 目標職種: ${profile.target_job_title}
- 目標年収: ${profile.target_annual_income}万円
- キャリア志向: ${profile.career_direction === 'management' ? 'マネジメント志向' : 'スペシャリスト志向'}
- 価値観スコア:
  - ワークライフバランス: ${profile.values_work_life_balance}/5
  - キャリア成長: ${profile.values_career_growth}/5
  - 報酬・待遇: ${profile.values_compensation}/5
  - 自律性: ${profile.values_autonomy}/5
  - 社会的影響: ${profile.values_impact}/5

以下の構造でJSONレスポンスを返してください：
{
  "summary": "モヤモヤの要約（50文字以内）",
  "analysis": {
    "rootCause": "根本原因の分析（150文字以内）",
    "patterns": ["パターン1", "パターン2", "パターン3"],
    "emotions": ["感情1", "感情2", "感情3"]
  },
  "recommendations": [
    {
      "title": "推奨アクション1",
      "description": "具体的な説明",
      "priority": "high|medium|low",
      "timeframe": "期間"
    }
  ],
  "nextSteps": ["具体的な次のステップ1", "具体的な次のステップ2", "具体的な次のステップ3"],
  "insights": "深い洞察とアドバイス（200文字以内）"
}`

        userPrompt = `現在の悩みや課題について教えてください：

${inputData.currentSituation}

特に気になること：
${inputData.specificConcerns}

どうなりたいか：
${inputData.desiredOutcome}`
        break

      case 'strength':
        systemPrompt = `あなたはキャリアコンサルタントとして、ユーザーの強みを分析し、キャリア活用方法を提案します。

ユーザーのプロフィール情報を考慮して、以下の構造でJSONレスポンスを返してください：
{
  "summary": "強みの要約",
  "strengths": [
    {
      "name": "強み名",
      "description": "説明",
      "evidence": ["根拠1", "根拠2"],
      "level": "high|medium|developing"
    }
  ],
  "applications": [
    {
      "area": "活用領域",
      "specific_ways": ["具体的な活用方法1", "具体的な活用方法2"],
      "impact": "期待される効果"
    }
  ],
  "development_plan": [
    {
      "strength": "強化したい強み",
      "actions": ["アクション1", "アクション2"],
      "timeline": "期間"
    }
  ]
}`

        userPrompt = `これまでの経験や成果について教えてください：
${inputData.experiences}

得意なことや自信があること：
${inputData.strengths}

周りからよく言われること：
${inputData.feedback}`
        break

      case 'career_path':
        systemPrompt = `あなたはキャリアコンサルタントとして、ユーザーに最適なキャリアパスを提案します。

以下の構造でJSONレスポンスを返してください：
{
  "summary": "推奨キャリアパスの要約",
  "recommended_paths": [
    {
      "title": "キャリアパス名",
      "description": "詳細説明",
      "fit_score": 85,
      "timeline": "3-5年",
      "required_skills": ["スキル1", "スキル2"],
      "steps": [
        {
          "phase": "フェーズ名",
          "duration": "期間",
          "actions": ["アクション1", "アクション2"],
          "milestones": ["マイルストーン1", "マイルストーン2"]
        }
      ]
    }
  ],
  "skill_gaps": [
    {
      "skill": "スキル名",
      "current_level": "初級|中級|上級",
      "target_level": "中級|上級|エキスパート",
      "learning_resources": ["リソース1", "リソース2"]
    }
  ]
}`
        break

      case 'values':
        systemPrompt = `あなたはキャリアコンサルタントとして、ユーザーの価値観を深く分析し、キャリア選択への影響を説明します。

以下の構造でJSONレスポンスを返してください：
{
  "summary": "価値観分析の要約",
  "value_profile": {
    "dominant_values": ["主要価値観1", "主要価値観2"],
    "value_conflicts": ["矛盾する価値観の組み合わせ"],
    "life_stage_consideration": "現在のライフステージでの価値観の特徴"
  },
  "career_implications": [
    {
      "value": "価値観",
      "career_impact": "キャリアへの影響",
      "recommended_environments": ["推奨環境1", "推奨環境2"],
      "potential_challenges": ["課題1", "課題2"]
    }
  ],
  "alignment_assessment": {
    "current_role_fit": 75,
    "target_role_fit": 90,
    "recommendations": ["推奨事項1", "推奨事項2"]
  }
}`
        break
    }

    // OpenAI APIを呼び出し
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 2000
    })

    const aiResponse = completion.choices[0].message.content
    let analysisResult

    try {
      analysisResult = JSON.parse(aiResponse || '{}')
    } catch (parseError) {
      // JSONパースに失敗した場合のフォールバック
      analysisResult = {
        summary: 'AI分析を実行しました',
        analysis: aiResponse,
        error: 'レスポンスの解析に失敗しました'
      }
    }

    // 分析結果をデータベースに保存
    const { data: savedAnalysis, error: saveError } = await supabase
      .from('ai_analyses')
      .insert([
        {
          user_id: user.id,
          analysis_type: analysisType,
          input_data: inputData,
          result: analysisResult
        }
      ])
      .select()
      .single()

    if (saveError) {
      console.error('Error saving analysis:', saveError)
    }

    return NextResponse.json({ 
      success: true, 
      result: analysisResult,
      analysisId: savedAnalysis?.id 
    })

  } catch (error) {
    console.error('Error in AI analysis:', error)
    return NextResponse.json(
      { error: 'AI分析でエラーが発生しました' }, 
      { status: 500 }
    )
  }
}
